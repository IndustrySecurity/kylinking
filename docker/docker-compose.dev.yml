version: '3.8'

services:
  # Frontend service (React)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: saas_frontend_dev
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000/api
      - VITE_APP_TITLE=KylinKing云膜智能管理系统
      - VITE_APP_ENV=development
    depends_on:
      - backend
    networks:
      - saas-network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Nginx (Web Server)
  nginx:
    image: nginx:alpine
    container_name: saas_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - saas-network
    restart: unless-stopped

  # Backend service (Flask API)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: saas_backend_dev
    ports:
      - "5000:5000"
    volumes:
      - ../backend:/app
    depends_on:
      - postgres
      - redis
    environment:
      - FLASK_APP=wsgi.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URI=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/saas_platform
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://localhost
    networks:
      - saas-network
    restart: unless-stopped
    command: flask run --host=0.0.0.0 --port=5000

  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: saas_postgres_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=saas_platform
    networks:
      - saas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and session management)
  redis:
    image: redis:alpine
    container_name: saas_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  saas-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 